/*
 * The Q&A EIST Twitter API
 * Allows the SlackBot to Interact with the TweetWall
 *
 * OpenAPI spec version: V1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ActiveSlidePath;
import io.swagger.client.model.DataItem;
import io.swagger.client.model.Feedback;
import io.swagger.client.model.MultiShotQuestion;
import io.swagger.client.model.Question;
import io.swagger.client.model.QuizQuestion;
import io.swagger.client.model.Reply;
import io.swagger.client.model.SingleShotQuestion;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * deletes a given Question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTweetInDBTest() throws ApiException {
        Question body = null;
        Question response = api.deleteTweetInDB(body);

        // TODO: test validations
    }
    
    /**
     * deletes a given Question by using its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTweetInDBByIdTest() throws ApiException {
        String body = null;
        Question response = api.deleteTweetInDBById(body);

        // TODO: test validations
    }
    
    /**
     * Returns an Array of active slides for (ppt, key, and dev)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActiveSlidesTest() throws ApiException {
        ActiveSlidePath response = api.getActiveSlides();

        // TODO: test validations
    }
    
    /**
     * retrieves all DataItem (mock)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllDatamodelsTest() throws ApiException {
        List<DataItem> response = api.getAllDatamodels();

        // TODO: test validations
    }
    
    /**
     * Retrieves all Presenters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllPresenterSessionsTest() throws ApiException {
        List<String> response = api.getAllPresenterSessions();

        // TODO: test validations
    }
    
    /**
     * retrieves all Replys (mock)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllRepliesTest() throws ApiException {
        List<Reply> response = api.getAllReplies();

        // TODO: test validations
    }
    
    /**
     * retrieves all Questions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllTweetsTest() throws ApiException {
        List<Question> response = api.getAllTweets();

        // TODO: test validations
    }
    
    /**
     * retrieves all twitter wall listeners
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllTwitterWallSessionsTest() throws ApiException {
        List<String> response = api.getAllTwitterWallSessions();

        // TODO: test validations
    }
    
    /**
     * retrieves last {num} closed Questions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClosedLastNumTweetsTest() throws ApiException {
        Integer num = null;
        List<Question> response = api.getClosedLastNumTweets(num);

        // TODO: test validations
    }
    
    /**
     * retrieves closed Questions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClosedTweetsTest() throws ApiException {
        List<Question> response = api.getClosedTweets();

        // TODO: test validations
    }
    
    /**
     * retrieves highscores
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHighscoresTest() throws ApiException {
        Map<String, Integer> response = api.getHighscores();

        // TODO: test validations
    }
    
    /**
     * retrieves open Questions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOpenTweetsTest() throws ApiException {
        List<Question> response = api.getOpenTweets();

        // TODO: test validations
    }
    
    /**
     * Returns a mapping ordered by timestamp of all presentationNames
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationsTest() throws ApiException {
        Map<String, String> response = api.getPresentations();

        // TODO: test validations
    }
    
    /**
     * retrieves question report
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportTest() throws ApiException {
        api.getReport();

        // TODO: test validations
    }
    
    /**
     * retrieves question by Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSingleTweetTest() throws ApiException {
        String id = null;
        Question response = api.getSingleTweet(id);

        // TODO: test validations
    }
    
    /**
     * Returns slidePath for PresentationName / SlideNumber
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideForPresentationNameAndSlideNumberTest() throws ApiException {
        String presentationName = null;
        Integer slideNumber = null;
        String response = api.getSlideForPresentationNameAndSlideNumber(presentationName, slideNumber);

        // TODO: test validations
    }
    
    /**
     * Returns slidePath for PresentationNumber / SlideName
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideForPresentationNumberAndSlideNameTest() throws ApiException {
        Integer presentationNumber = null;
        String slideName = null;
        String response = api.getSlideForPresentationNumberAndSlideName(presentationNumber, slideName);

        // TODO: test validations
    }
    
    /**
     * Returns slidePath for PresentationNumber / SlideNumber
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideForPresentationNumberAndSlideNumberTest() throws ApiException {
        Integer presentationNumber = null;
        Integer slideNumber = null;
        String response = api.getSlideForPresentationNumberAndSlideNumber(presentationNumber, slideNumber);

        // TODO: test validations
    }
    
    /**
     * Returns all Slides for PresentationName
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesForPresentationNameTest() throws ApiException {
        String presentationName = null;
        Map<String, String> response = api.getSlidesForPresentationName(presentationName);

        // TODO: test validations
    }
    
    /**
     * Returns slidePath for PresentationNumber / SlideName
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesForPresentationNameAndSlideNameTest() throws ApiException {
        String presentationName = null;
        String slideName = null;
        String response = api.getSlidesForPresentationNameAndSlideName(presentationName, slideName);

        // TODO: test validations
    }
    
    /**
     * Returns all Slides for PresentationNumber
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesForPresentationNumberTest() throws ApiException {
        Integer presentationNumber = null;
        Map<String, String> response = api.getSlidesForPresentationNumber(presentationNumber);

        // TODO: test validations
    }
    
    /**
     * saves a new Feedback, updates it if already existent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postFeedbackToDBTest() throws ApiException {
        Feedback body = null;
        Feedback response = api.postFeedbackToDB(body);

        // TODO: test validations
    }
    
    /**
     * saves a new Question, updates it if already existent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postReplyAndCloseQuestionTest() throws ApiException {
        String id = null;
        Question response = api.postReplyAndCloseQuestion(id);

        // TODO: test validations
    }
    
    /**
     * saves a new Question, updates it if already existent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTweetInDBTest() throws ApiException {
        Question body = null;
        Question response = api.postTweetInDB(body);

        // TODO: test validations
    }
    
    /**
     * saves a new multi shot Quiz 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveMultiQuizInDBTest() throws ApiException {
        MultiShotQuestion body = null;
        QuizQuestion response = api.saveMultiQuizInDB(body);

        // TODO: test validations
    }
    
    /**
     * saves a new single shot Quiz 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSingleQuizInDBTest() throws ApiException {
        SingleShotQuestion body = null;
        QuizQuestion response = api.saveSingleQuizInDB(body);

        // TODO: test validations
    }
    
    /**
     * saves a new Question, updates it if already existent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTweetInDBTest() throws ApiException {
        Question body = null;
        Question response = api.updateTweetInDB(body);

        // TODO: test validations
    }
    
}
