/*
 * The Q&A EIST Twitter API
 * Allows the SlackBot to Interact with the TweetWall
 *
 * OpenAPI spec version: V1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.tum.jk.application.model.ActiveSlidePath;
import de.tum.jk.application.model.DataItem;
import de.tum.jk.application.model.Feedback;
import io.swagger.client.model.Principal;
import de.tum.jk.application.model.Question;
import de.tum.jk.application.model.Reply;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteTweetInDB */
    private com.squareup.okhttp.Call deleteTweetInDBCall(Principal body, Question body2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body2;
        
        // create path and map variables
        String localVarPath = "/bot/question".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTweetInDBValidateBeforeCall(Principal body, Question body2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = deleteTweetInDBCall(body, body2, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deletes a given Question
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @return Question
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Question deleteTweetInDB(Principal body, Question body2) throws ApiException {
        ApiResponse<Question> resp = deleteTweetInDBWithHttpInfo(body, body2);
        return resp.getData();
    }

    /**
     * deletes a given Question
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @return ApiResponse&lt;Question&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Question> deleteTweetInDBWithHttpInfo(Principal body, Question body2) throws ApiException {
        com.squareup.okhttp.Call call = deleteTweetInDBValidateBeforeCall(body, body2, null, null);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deletes a given Question (asynchronously)
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTweetInDBAsync(Principal body, Question body2, final ApiCallback<Question> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTweetInDBValidateBeforeCall(body, body2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteTweetInDBById */
    private com.squareup.okhttp.Call deleteTweetInDBByIdCall(Principal body, String body2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body2;
        
        // create path and map variables
        String localVarPath = "/bot/question/{id}".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTweetInDBByIdValidateBeforeCall(Principal body, String body2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = deleteTweetInDBByIdCall(body, body2, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deletes a given Question by using its ID
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @return Question
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Question deleteTweetInDBById(Principal body, String body2) throws ApiException {
        ApiResponse<Question> resp = deleteTweetInDBByIdWithHttpInfo(body, body2);
        return resp.getData();
    }

    /**
     * deletes a given Question by using its ID
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @return ApiResponse&lt;Question&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Question> deleteTweetInDBByIdWithHttpInfo(Principal body, String body2) throws ApiException {
        com.squareup.okhttp.Call call = deleteTweetInDBByIdValidateBeforeCall(body, body2, null, null);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deletes a given Question by using its ID (asynchronously)
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTweetInDBByIdAsync(Principal body, String body2, final ApiCallback<Question> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTweetInDBByIdValidateBeforeCall(body, body2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getActiveSlides */
    private com.squareup.okhttp.Call getActiveSlidesCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/slide/live".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActiveSlidesValidateBeforeCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getActiveSlidesCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns an Array of active slides for (ppt, key, and dev)
     * 
     * @param body  (optional)
     * @return ActiveSlidePath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActiveSlidePath getActiveSlides(Principal body) throws ApiException {
        ApiResponse<ActiveSlidePath> resp = getActiveSlidesWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Returns an Array of active slides for (ppt, key, and dev)
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;ActiveSlidePath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActiveSlidePath> getActiveSlidesWithHttpInfo(Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getActiveSlidesValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ActiveSlidePath>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns an Array of active slides for (ppt, key, and dev) (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActiveSlidesAsync(Principal body, final ApiCallback<ActiveSlidePath> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActiveSlidesValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActiveSlidePath>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllDatamodels */
    private com.squareup.okhttp.Call getAllDatamodelsCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/dataitem".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllDatamodelsValidateBeforeCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllDatamodelsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrieves all DataItem (mock)
     * 
     * @param body  (optional)
     * @return List&lt;DataItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DataItem> getAllDatamodels(Principal body) throws ApiException {
        ApiResponse<List<DataItem>> resp = getAllDatamodelsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * retrieves all DataItem (mock)
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;DataItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DataItem>> getAllDatamodelsWithHttpInfo(Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getAllDatamodelsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<DataItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieves all DataItem (mock) (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllDatamodelsAsync(Principal body, final ApiCallback<List<DataItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllDatamodelsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DataItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllPresenterSessions */
    private com.squareup.okhttp.Call getAllPresenterSessionsCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/presenter".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllPresenterSessionsValidateBeforeCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllPresenterSessionsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves all Presenters
     * 
     * @param body  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getAllPresenterSessions(Principal body) throws ApiException {
        ApiResponse<List<String>> resp = getAllPresenterSessionsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Retrieves all Presenters
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getAllPresenterSessionsWithHttpInfo(Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getAllPresenterSessionsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves all Presenters (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllPresenterSessionsAsync(Principal body, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllPresenterSessionsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllReplies */
    private com.squareup.okhttp.Call getAllRepliesCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/question/replies".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllRepliesValidateBeforeCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllRepliesCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrieves all Replys (mock)
     * 
     * @param body  (optional)
     * @return List&lt;Reply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Reply> getAllReplies(Principal body) throws ApiException {
        ApiResponse<List<Reply>> resp = getAllRepliesWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * retrieves all Replys (mock)
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Reply&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Reply>> getAllRepliesWithHttpInfo(Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getAllRepliesValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<Reply>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieves all Replys (mock) (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllRepliesAsync(Principal body, final ApiCallback<List<Reply>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllRepliesValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Reply>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllTweets */
    private com.squareup.okhttp.Call getAllTweetsCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/question".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllTweetsValidateBeforeCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllTweetsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrieves all Questions
     * 
     * @param body  (optional)
     * @return List&lt;Question&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Question> getAllTweets(Principal body) throws ApiException {
        ApiResponse<List<Question>> resp = getAllTweetsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * retrieves all Questions
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Question&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Question>> getAllTweetsWithHttpInfo(Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getAllTweetsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<Question>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieves all Questions (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTweetsAsync(Principal body, final ApiCallback<List<Question>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTweetsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Question>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllTwitterWallSessions */
    private com.squareup.okhttp.Call getAllTwitterWallSessionsCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/twitterwalls".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllTwitterWallSessionsValidateBeforeCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllTwitterWallSessionsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrieves all twitter wall listeners
     * 
     * @param body  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getAllTwitterWallSessions(Principal body) throws ApiException {
        ApiResponse<List<String>> resp = getAllTwitterWallSessionsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * retrieves all twitter wall listeners
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getAllTwitterWallSessionsWithHttpInfo(Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getAllTwitterWallSessionsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieves all twitter wall listeners (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTwitterWallSessionsAsync(Principal body, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTwitterWallSessionsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPresentations */
    private com.squareup.okhttp.Call getPresentationsCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/presentation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPresentationsValidateBeforeCall(Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getPresentationsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a mapping ordered by timestamp of all presentationNames
     * 
     * @param body  (optional)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, String> getPresentations(Principal body) throws ApiException {
        ApiResponse<Map<String, String>> resp = getPresentationsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Returns a mapping ordered by timestamp of all presentationNames
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, String>> getPresentationsWithHttpInfo(Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getPresentationsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a mapping ordered by timestamp of all presentationNames (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPresentationsAsync(Principal body, final ApiCallback<Map<String, String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPresentationsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSingleTweet */
    private com.squareup.okhttp.Call getSingleTweetCall(String id, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/question/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSingleTweetValidateBeforeCall(String id, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSingleTweet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSingleTweetCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrieves question by Id
     * 
     * @param id  (required)
     * @param body  (optional)
     * @return Question
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Question getSingleTweet(String id, Principal body) throws ApiException {
        ApiResponse<Question> resp = getSingleTweetWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * retrieves question by Id
     * 
     * @param id  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Question&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Question> getSingleTweetWithHttpInfo(String id, Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getSingleTweetValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieves question by Id (asynchronously)
     * 
     * @param id  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSingleTweetAsync(String id, Principal body, final ApiCallback<Question> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSingleTweetValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSlideForPresentationNameAndSlideNumber */
    private com.squareup.okhttp.Call getSlideForPresentationNameAndSlideNumberCall(String presentationName, Integer slideNumber, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/presentation/name/{presentationName}/slide/number/{slideNumber}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "presentationName" + "\\}", apiClient.escapeString(presentationName.toString()))
        .replaceAll("\\{" + "slideNumber" + "\\}", apiClient.escapeString(slideNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSlideForPresentationNameAndSlideNumberValidateBeforeCall(String presentationName, Integer slideNumber, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'presentationName' is set
        if (presentationName == null) {
            throw new ApiException("Missing the required parameter 'presentationName' when calling getSlideForPresentationNameAndSlideNumber(Async)");
        }
        
        // verify the required parameter 'slideNumber' is set
        if (slideNumber == null) {
            throw new ApiException("Missing the required parameter 'slideNumber' when calling getSlideForPresentationNameAndSlideNumber(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSlideForPresentationNameAndSlideNumberCall(presentationName, slideNumber, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns slidePath for PresentationName / SlideNumber
     * 
     * @param presentationName  (required)
     * @param slideNumber  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getSlideForPresentationNameAndSlideNumber(String presentationName, Integer slideNumber, Principal body) throws ApiException {
        ApiResponse<String> resp = getSlideForPresentationNameAndSlideNumberWithHttpInfo(presentationName, slideNumber, body);
        return resp.getData();
    }

    /**
     * Returns slidePath for PresentationName / SlideNumber
     * 
     * @param presentationName  (required)
     * @param slideNumber  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getSlideForPresentationNameAndSlideNumberWithHttpInfo(String presentationName, Integer slideNumber, Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getSlideForPresentationNameAndSlideNumberValidateBeforeCall(presentationName, slideNumber, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns slidePath for PresentationName / SlideNumber (asynchronously)
     * 
     * @param presentationName  (required)
     * @param slideNumber  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideForPresentationNameAndSlideNumberAsync(String presentationName, Integer slideNumber, Principal body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideForPresentationNameAndSlideNumberValidateBeforeCall(presentationName, slideNumber, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSlideForPresentationNumberAndSlideName */
    private com.squareup.okhttp.Call getSlideForPresentationNumberAndSlideNameCall(Integer presentationNumber, String slideName, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/presentation/number/{presentationNumber}/slide/name/{slideName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "presentationNumber" + "\\}", apiClient.escapeString(presentationNumber.toString()))
        .replaceAll("\\{" + "slideName" + "\\}", apiClient.escapeString(slideName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSlideForPresentationNumberAndSlideNameValidateBeforeCall(Integer presentationNumber, String slideName, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'presentationNumber' is set
        if (presentationNumber == null) {
            throw new ApiException("Missing the required parameter 'presentationNumber' when calling getSlideForPresentationNumberAndSlideName(Async)");
        }
        
        // verify the required parameter 'slideName' is set
        if (slideName == null) {
            throw new ApiException("Missing the required parameter 'slideName' when calling getSlideForPresentationNumberAndSlideName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSlideForPresentationNumberAndSlideNameCall(presentationNumber, slideName, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns slidePath for PresentationNumber / SlideName
     * 
     * @param presentationNumber  (required)
     * @param slideName  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getSlideForPresentationNumberAndSlideName(Integer presentationNumber, String slideName, Principal body) throws ApiException {
        ApiResponse<String> resp = getSlideForPresentationNumberAndSlideNameWithHttpInfo(presentationNumber, slideName, body);
        return resp.getData();
    }

    /**
     * Returns slidePath for PresentationNumber / SlideName
     * 
     * @param presentationNumber  (required)
     * @param slideName  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getSlideForPresentationNumberAndSlideNameWithHttpInfo(Integer presentationNumber, String slideName, Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getSlideForPresentationNumberAndSlideNameValidateBeforeCall(presentationNumber, slideName, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns slidePath for PresentationNumber / SlideName (asynchronously)
     * 
     * @param presentationNumber  (required)
     * @param slideName  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideForPresentationNumberAndSlideNameAsync(Integer presentationNumber, String slideName, Principal body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideForPresentationNumberAndSlideNameValidateBeforeCall(presentationNumber, slideName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSlideForPresentationNumberAndSlideNumber */
    private com.squareup.okhttp.Call getSlideForPresentationNumberAndSlideNumberCall(Integer presentationNumber, Integer slideNumber, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/presentation/number/{presentationNumber}/slide/number/{slideNumber}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "presentationNumber" + "\\}", apiClient.escapeString(presentationNumber.toString()))
        .replaceAll("\\{" + "slideNumber" + "\\}", apiClient.escapeString(slideNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSlideForPresentationNumberAndSlideNumberValidateBeforeCall(Integer presentationNumber, Integer slideNumber, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'presentationNumber' is set
        if (presentationNumber == null) {
            throw new ApiException("Missing the required parameter 'presentationNumber' when calling getSlideForPresentationNumberAndSlideNumber(Async)");
        }
        
        // verify the required parameter 'slideNumber' is set
        if (slideNumber == null) {
            throw new ApiException("Missing the required parameter 'slideNumber' when calling getSlideForPresentationNumberAndSlideNumber(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSlideForPresentationNumberAndSlideNumberCall(presentationNumber, slideNumber, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns slidePath for PresentationNumber / SlideNumber
     * 
     * @param presentationNumber  (required)
     * @param slideNumber  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getSlideForPresentationNumberAndSlideNumber(Integer presentationNumber, Integer slideNumber, Principal body) throws ApiException {
        ApiResponse<String> resp = getSlideForPresentationNumberAndSlideNumberWithHttpInfo(presentationNumber, slideNumber, body);
        return resp.getData();
    }

    /**
     * Returns slidePath for PresentationNumber / SlideNumber
     * 
     * @param presentationNumber  (required)
     * @param slideNumber  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getSlideForPresentationNumberAndSlideNumberWithHttpInfo(Integer presentationNumber, Integer slideNumber, Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getSlideForPresentationNumberAndSlideNumberValidateBeforeCall(presentationNumber, slideNumber, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns slidePath for PresentationNumber / SlideNumber (asynchronously)
     * 
     * @param presentationNumber  (required)
     * @param slideNumber  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideForPresentationNumberAndSlideNumberAsync(Integer presentationNumber, Integer slideNumber, Principal body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideForPresentationNumberAndSlideNumberValidateBeforeCall(presentationNumber, slideNumber, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSlidesForPresentationName */
    private com.squareup.okhttp.Call getSlidesForPresentationNameCall(String presentationName, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/presentation/name/{presentationName}/slide".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "presentationName" + "\\}", apiClient.escapeString(presentationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSlidesForPresentationNameValidateBeforeCall(String presentationName, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'presentationName' is set
        if (presentationName == null) {
            throw new ApiException("Missing the required parameter 'presentationName' when calling getSlidesForPresentationName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSlidesForPresentationNameCall(presentationName, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns all Slides for PresentationName
     * 
     * @param presentationName  (required)
     * @param body  (optional)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, String> getSlidesForPresentationName(String presentationName, Principal body) throws ApiException {
        ApiResponse<Map<String, String>> resp = getSlidesForPresentationNameWithHttpInfo(presentationName, body);
        return resp.getData();
    }

    /**
     * Returns all Slides for PresentationName
     * 
     * @param presentationName  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, String>> getSlidesForPresentationNameWithHttpInfo(String presentationName, Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getSlidesForPresentationNameValidateBeforeCall(presentationName, body, null, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all Slides for PresentationName (asynchronously)
     * 
     * @param presentationName  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlidesForPresentationNameAsync(String presentationName, Principal body, final ApiCallback<Map<String, String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlidesForPresentationNameValidateBeforeCall(presentationName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSlidesForPresentationNameAndSlideName */
    private com.squareup.okhttp.Call getSlidesForPresentationNameAndSlideNameCall(String presentationName, String slideName, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/presentation/name/{presentationName}/slide/name/{slideName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "presentationName" + "\\}", apiClient.escapeString(presentationName.toString()))
        .replaceAll("\\{" + "slideName" + "\\}", apiClient.escapeString(slideName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSlidesForPresentationNameAndSlideNameValidateBeforeCall(String presentationName, String slideName, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'presentationName' is set
        if (presentationName == null) {
            throw new ApiException("Missing the required parameter 'presentationName' when calling getSlidesForPresentationNameAndSlideName(Async)");
        }
        
        // verify the required parameter 'slideName' is set
        if (slideName == null) {
            throw new ApiException("Missing the required parameter 'slideName' when calling getSlidesForPresentationNameAndSlideName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSlidesForPresentationNameAndSlideNameCall(presentationName, slideName, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns slidePath for PresentationNumber / SlideName
     * 
     * @param presentationName  (required)
     * @param slideName  (required)
     * @param body  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getSlidesForPresentationNameAndSlideName(String presentationName, String slideName, Principal body) throws ApiException {
        ApiResponse<String> resp = getSlidesForPresentationNameAndSlideNameWithHttpInfo(presentationName, slideName, body);
        return resp.getData();
    }

    /**
     * Returns slidePath for PresentationNumber / SlideName
     * 
     * @param presentationName  (required)
     * @param slideName  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getSlidesForPresentationNameAndSlideNameWithHttpInfo(String presentationName, String slideName, Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getSlidesForPresentationNameAndSlideNameValidateBeforeCall(presentationName, slideName, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns slidePath for PresentationNumber / SlideName (asynchronously)
     * 
     * @param presentationName  (required)
     * @param slideName  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlidesForPresentationNameAndSlideNameAsync(String presentationName, String slideName, Principal body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlidesForPresentationNameAndSlideNameValidateBeforeCall(presentationName, slideName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSlidesForPresentationNumber */
    private com.squareup.okhttp.Call getSlidesForPresentationNumberCall(Integer presentationNumber, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/presentation/number/{presentationNumber}/slide".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "presentationNumber" + "\\}", apiClient.escapeString(presentationNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSlidesForPresentationNumberValidateBeforeCall(Integer presentationNumber, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'presentationNumber' is set
        if (presentationNumber == null) {
            throw new ApiException("Missing the required parameter 'presentationNumber' when calling getSlidesForPresentationNumber(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSlidesForPresentationNumberCall(presentationNumber, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns all Slides for PresentationNumber
     * 
     * @param presentationNumber  (required)
     * @param body  (optional)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, String> getSlidesForPresentationNumber(Integer presentationNumber, Principal body) throws ApiException {
        ApiResponse<Map<String, String>> resp = getSlidesForPresentationNumberWithHttpInfo(presentationNumber, body);
        return resp.getData();
    }

    /**
     * Returns all Slides for PresentationNumber
     * 
     * @param presentationNumber  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, String>> getSlidesForPresentationNumberWithHttpInfo(Integer presentationNumber, Principal body) throws ApiException {
        com.squareup.okhttp.Call call = getSlidesForPresentationNumberValidateBeforeCall(presentationNumber, body, null, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all Slides for PresentationNumber (asynchronously)
     * 
     * @param presentationNumber  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlidesForPresentationNumberAsync(Integer presentationNumber, Principal body, final ApiCallback<Map<String, String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlidesForPresentationNumberValidateBeforeCall(presentationNumber, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postFeedbackToDB */
    private com.squareup.okhttp.Call postFeedbackToDBCall(Principal body, Feedback body2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body2;
        
        // create path and map variables
        String localVarPath = "/bot/feedback".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postFeedbackToDBValidateBeforeCall(Principal body, Feedback body2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = postFeedbackToDBCall(body, body2, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * saves a new Feedback, updates it if already existent
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @return Feedback
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Feedback postFeedbackToDB(Principal body, Feedback body2) throws ApiException {
        ApiResponse<Feedback> resp = postFeedbackToDBWithHttpInfo(body, body2);
        return resp.getData();
    }

    /**
     * saves a new Feedback, updates it if already existent
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @return ApiResponse&lt;Feedback&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Feedback> postFeedbackToDBWithHttpInfo(Principal body, Feedback body2) throws ApiException {
        com.squareup.okhttp.Call call = postFeedbackToDBValidateBeforeCall(body, body2, null, null);
        Type localVarReturnType = new TypeToken<Feedback>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * saves a new Feedback, updates it if already existent (asynchronously)
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postFeedbackToDBAsync(Principal body, Feedback body2, final ApiCallback<Feedback> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postFeedbackToDBValidateBeforeCall(body, body2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Feedback>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postReplyAndCloseQuestion */
    private com.squareup.okhttp.Call postReplyAndCloseQuestionCall(String id, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/bot/question/close/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postReplyAndCloseQuestionValidateBeforeCall(String id, Principal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postReplyAndCloseQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postReplyAndCloseQuestionCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * saves a new Question, updates it if already existent
     * 
     * @param id  (required)
     * @param body  (optional)
     * @return Question
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Question postReplyAndCloseQuestion(String id, Principal body) throws ApiException {
        ApiResponse<Question> resp = postReplyAndCloseQuestionWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * saves a new Question, updates it if already existent
     * 
     * @param id  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Question&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Question> postReplyAndCloseQuestionWithHttpInfo(String id, Principal body) throws ApiException {
        com.squareup.okhttp.Call call = postReplyAndCloseQuestionValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * saves a new Question, updates it if already existent (asynchronously)
     * 
     * @param id  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postReplyAndCloseQuestionAsync(String id, Principal body, final ApiCallback<Question> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postReplyAndCloseQuestionValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postTweetInDB */
    private com.squareup.okhttp.Call postTweetInDBCall(Principal body, Question body2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body2;
        
        // create path and map variables
        String localVarPath = "/bot/question".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTweetInDBValidateBeforeCall(Principal body, Question body2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = postTweetInDBCall(body, body2, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * saves a new Question, updates it if already existent
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @return Question
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Question postTweetInDB(Principal body, Question body2) throws ApiException {
        ApiResponse<Question> resp = postTweetInDBWithHttpInfo(body, body2);
        return resp.getData();
    }

    /**
     * saves a new Question, updates it if already existent
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @return ApiResponse&lt;Question&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Question> postTweetInDBWithHttpInfo(Principal body, Question body2) throws ApiException {
        com.squareup.okhttp.Call call = postTweetInDBValidateBeforeCall(body, body2, null, null);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * saves a new Question, updates it if already existent (asynchronously)
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTweetInDBAsync(Principal body, Question body2, final ApiCallback<Question> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTweetInDBValidateBeforeCall(body, body2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTweetInDB */
    private com.squareup.okhttp.Call updateTweetInDBCall(Principal body, Question body2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body2;
        
        // create path and map variables
        String localVarPath = "/bot/question".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic-auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTweetInDBValidateBeforeCall(Principal body, Question body2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = updateTweetInDBCall(body, body2, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * saves a new Question, updates it if already existent
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @return Question
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Question updateTweetInDB(Principal body, Question body2) throws ApiException {
        ApiResponse<Question> resp = updateTweetInDBWithHttpInfo(body, body2);
        return resp.getData();
    }

    /**
     * saves a new Question, updates it if already existent
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @return ApiResponse&lt;Question&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Question> updateTweetInDBWithHttpInfo(Principal body, Question body2) throws ApiException {
        com.squareup.okhttp.Call call = updateTweetInDBValidateBeforeCall(body, body2, null, null);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * saves a new Question, updates it if already existent (asynchronously)
     * 
     * @param body  (optional)
     * @param body2  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTweetInDBAsync(Principal body, Question body2, final ApiCallback<Question> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTweetInDBValidateBeforeCall(body, body2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
